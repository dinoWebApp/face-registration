<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>안면 등록 시스템</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: #f0f2f5;
        padding: 20px;
      }

      #container {
        position: relative;
        width: 100%;
        max-width: 640px;
        aspect-ratio: 4 / 3;
        background-color: #000;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }

      video,
      canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transform: scaleX(-1); /* 좌우 반전 */
      }

      #statusMessage {
        margin-top: 20px;
        padding: 10px 15px;
        border-radius: 5px;
        font-size: 1.1em;
        color: #fff;
        text-align: center;
      }

      .info {
        background-color: #2196f3;
      }
      .success {
        background-color: #4caf50;
      }
      .failure {
        background-color: #f44336;
      }

      input,
      button {
        margin-top: 15px;
        font-size: 1em;
        padding: 10px 15px;
        width: 100%;
        max-width: 300px;
        border-radius: 5px;
        box-sizing: border-box;
      }

      input {
        border: 1px solid #ccc;
      }

      button {
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
      }

      button:hover {
        background-color: #0056b3;
      }
      button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
      }
    </style>
  </head>
  <body>
    <h1>안면 등록 시스템</h1>
    <div id="container">
      <video id="videoInput" autoplay muted></video>
      <canvas id="overlayCanvas"></canvas>
    </div>

    <input
      type="text"
      id="userNameInput"
      placeholder="이름을 입력하세요"
      required
    />
    <button id="registerFaceButton">얼굴 등록</button>
    <div id="statusMessage" class="info">모델 로딩 중...</div>

    <script src="/js/face-api.min.js"></script>
    <script>
      const video = document.getElementById('videoInput');
      const canvas = document.getElementById('overlayCanvas');
      const userNameInput = document.getElementById('userNameInput');
      const registerFaceButton = document.getElementById('registerFaceButton');
      const statusMessage = document.getElementById('statusMessage');

      let displaySize;
      const DETECTION_THRESHOLD = 0.7;
      const MIN_FACE_SIZE_RATIO = 0.2;
      const MAX_FACE_SIZE_RATIO = 0.8;
      const FACE_CENTER_TOLERANCE = 0.2;

      function updateStatus(msg, type = 'info') {
        statusMessage.textContent = msg;
        statusMessage.className = type;
        console.log('[Status]', msg);
      }

      async function loadModels() {
        try {
          await Promise.all([
            faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
            faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
            faceapi.nets.faceRecognitionNet.loadFromUri('/models'),
          ]);
          updateStatus('모델 로드 완료. 카메라 시작 중...', 'success');
          startCamera();
        } catch (err) {
          console.error('모델 로드 실패:', err);
          updateStatus('모델 로드 실패. models 폴더 확인 필요.', 'failure');
        }
      }

      async function startCamera() {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: {
              width: { ideal: 640 },
              height: { ideal: 480 },
              frameRate: { ideal: 30 },
              facingMode: 'user', // ✅ 아이폰 호환을 위한 필수 설정
            },
          });
          video.srcObject = stream;
          video.onloadedmetadata = () => {
            video.play();
            displaySize = {
              width: video.videoWidth,
              height: video.videoHeight,
            };
            faceapi.matchDimensions(canvas, displaySize);
            updateStatus(
              '카메라 활성화 완료. 이름 입력 후 얼굴 등록을 눌러주세요.',
              'info',
            );
          };
        } catch (err) {
          console.error('카메라 접근 실패:', err);
          updateStatus('카메라 접근 실패', 'failure');
        }
      }

      async function registerFace() {
        const name = userNameInput.value.trim();
        if (!name) {
          updateStatus('이름을 입력해야 등록할 수 있습니다.', 'failure');
          return;
        }

        updateStatus('얼굴 분석 중...', 'info');
        const detections = await faceapi
          .detectAllFaces(
            video,
            new faceapi.TinyFaceDetectorOptions({
              inputSize: 320,
              scoreThreshold: DETECTION_THRESHOLD,
            }),
          )
          .withFaceLandmarks()
          .withFaceDescriptors();

        if (!detections.length) {
          updateStatus('⚠️ 얼굴이 감지되지 않았습니다.', 'failure');
          return;
        }

        if (detections.length > 1) {
          updateStatus(
            '⚠️ 여러 얼굴이 감지되었습니다. 한 명만 비춰주세요.',
            'failure',
          );
          return;
        }

        const detection = detections[0];
        const { box } = detection.detection;
        const faceWidthRatio = box.width / canvas.width;
        const faceHeightRatio = box.height / canvas.height;

        if (
          faceWidthRatio < MIN_FACE_SIZE_RATIO ||
          faceHeightRatio < MIN_FACE_SIZE_RATIO
        ) {
          updateStatus(
            '⚠️ 얼굴이 너무 멀리 있습니다. 가까이 와주세요.',
            'failure',
          );
          return;
        }

        if (
          faceWidthRatio > MAX_FACE_SIZE_RATIO ||
          faceHeightRatio > MAX_FACE_SIZE_RATIO
        ) {
          updateStatus(
            '⚠️ 얼굴이 너무 가까이 있습니다. 멀어져주세요.',
            'failure',
          );
          return;
        }

        const faceCenterX = box.x + box.width / 2;
        const faceCenterY = box.y + box.height / 2;
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        if (
          Math.abs(faceCenterX - centerX) >
            canvas.width * FACE_CENTER_TOLERANCE ||
          Math.abs(faceCenterY - centerY) >
            canvas.height * FACE_CENTER_TOLERANCE
        ) {
          updateStatus('⚠️ 얼굴이 중앙에 위치해야 합니다.', 'failure');
          return;
        }

        // 서버 전송
        try {
          updateStatus(`'${name}' 등록 중...`, 'info');
          const descriptorArray = Array.from(detection.descriptor);
          const res = await fetch('/registration', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, descriptor: descriptorArray }),
          });

          if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || '등록 실패');
          }

          updateStatus(`✅ '${name}' 등록 성공!`, 'success');
        } catch (e) {
          console.error('등록 실패:', e);
          updateStatus('❌ 등록 실패: ' + e.message, 'failure');
        }
      }

      registerFaceButton.addEventListener('click', registerFace);
      loadModels();
    </script>
  </body>
</html>
